# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import models, migrations
import django.core.validators


class Migration(migrations.Migration):

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='BurnablePoisonAssembly',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('time_inserted', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('remark', models.TextField(blank=True)),
            ],
            options={
                'verbose_name': 'Burnable absorber rod pattern',
                'db_table': 'burnable_poison_assembly',
            },
        ),
        migrations.CreateModel(
            name='BurnablePoisonAssemblyLoadingPattern',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('time_inserted', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('remark', models.TextField(blank=True)),
                ('burnable_poison_assembly', models.ForeignKey(to='tragopan.BurnablePoisonAssembly')),
            ],
            options={
                'verbose_name': 'Burnable absorber assembly',
                'db_table': 'burnable_poison_assembly_loading_pattern',
                'verbose_name_plural': 'Burnable absorber assemblies',
            },
        ),
        migrations.CreateModel(
            name='BurnablePoisonMaterial',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('time_inserted', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('remark', models.TextField(blank=True)),
                ('radius', models.DecimalField(decimal_places=3, max_digits=7, validators=[django.core.validators.MinValueValidator(0)], help_text='unit:cm')),
            ],
            options={
                'db_table': 'burnable_poison_rod_material',
            },
        ),
        migrations.CreateModel(
            name='BurnablePoisonRod',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('time_inserted', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('remark', models.TextField(blank=True)),
                ('length', models.DecimalField(decimal_places=3, max_digits=7, validators=[django.core.validators.MinValueValidator(0)], help_text='unit:cm')),
                ('active_length', models.DecimalField(decimal_places=3, max_digits=7, validators=[django.core.validators.MinValueValidator(0)], help_text='unit:cm')),
            ],
            options={
                'verbose_name': 'Burnable absorber rod',
                'db_table': 'burnable_poison_rod',
            },
        ),
        migrations.CreateModel(
            name='BurnablePoisonRodMap',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('time_inserted', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('remark', models.TextField(blank=True)),
                ('height', models.DecimalField(decimal_places=5, max_digits=7, validators=[django.core.validators.MinValueValidator(0)], help_text='unit:cm')),
                ('burnable_poison_assembly', models.ForeignKey(related_name='rod_positions', to='tragopan.BurnablePoisonAssembly')),
            ],
            options={
                'db_table': 'burnable_poison_rod_map',
            },
        ),
        migrations.CreateModel(
            name='CladdingTube',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('time_inserted', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('remark', models.TextField(blank=True)),
                ('outer_diameter', models.DecimalField(decimal_places=3, max_digits=7, validators=[django.core.validators.MinValueValidator(0)], help_text='unit:cm')),
                ('inner_diameter', models.DecimalField(decimal_places=3, max_digits=7, validators=[django.core.validators.MinValueValidator(0)], help_text='unit:cm')),
                ('roughness', models.DecimalField(decimal_places=6, validators=[django.core.validators.MinValueValidator(0)], null=True, max_digits=7, blank=True, help_text='unit:cm')),
            ],
            options={
                'db_table': 'cladding_tube',
            },
        ),
        migrations.CreateModel(
            name='ControlRodAssembly',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('time_inserted', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('remark', models.TextField(blank=True)),
                ('cluster_name', models.CharField(max_length=5)),
                ('type', models.PositiveSmallIntegerField(default=1, choices=[(1, 'black rod'), (2, 'grep rod')])),
                ('basez', models.DecimalField(decimal_places=5, max_digits=7, validators=[django.core.validators.MinValueValidator(0)], help_text='unit:cm')),
                ('step_size', models.DecimalField(decimal_places=5, max_digits=7, validators=[django.core.validators.MinValueValidator(0)], help_text='unit:cm')),
                ('primary', models.BooleanField(default=False, verbose_name='if primary?')),
            ],
            options={
                'db_table': 'control_rod_assembly',
                'verbose_name_plural': 'Control rod assemblies',
            },
        ),
        migrations.CreateModel(
            name='ControlRodAssemblyLoadingPattern',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('time_inserted', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('remark', models.TextField(blank=True)),
                ('control_rod_assembly', models.ForeignKey(to='tragopan.ControlRodAssembly')),
            ],
            options={
                'db_table': 'control_rod_assembly_loading_pattern',
            },
        ),
        migrations.CreateModel(
            name='ControlRodAssemblyStep',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('time_inserted', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('remark', models.TextField(blank=True)),
                ('step', models.DecimalField(decimal_places=5, validators=[django.core.validators.MinValueValidator(0)], max_digits=10)),
                ('control_rod_assembly', models.ForeignKey(to='tragopan.ControlRodAssembly')),
            ],
            options={
                'db_table': 'control_rod_assembly_step',
            },
        ),
        migrations.CreateModel(
            name='ControlRodMap',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('time_inserted', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('remark', models.TextField(blank=True)),
                ('control_rod_assembly', models.ForeignKey(related_name='control_rods', to='tragopan.ControlRodAssembly')),
            ],
            options={
                'db_table': 'control_rod_map',
            },
        ),
        migrations.CreateModel(
            name='ControlRodType',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('time_inserted', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('remark', models.TextField(blank=True)),
                ('absorb_length', models.DecimalField(decimal_places=5, max_digits=9, validators=[django.core.validators.MinValueValidator(0)], help_text='unit:cm')),
                ('absorb_diameter', models.DecimalField(decimal_places=5, max_digits=7, validators=[django.core.validators.MinValueValidator(0)], help_text='unit:cm')),
                ('cladding_inner_diameter', models.DecimalField(decimal_places=5, max_digits=7, validators=[django.core.validators.MinValueValidator(0)], help_text='unit:cm')),
                ('cladding_outer_diameter', models.DecimalField(decimal_places=5, max_digits=7, validators=[django.core.validators.MinValueValidator(0)], help_text='unit:cm')),
            ],
            options={
                'verbose_name': 'Control rod',
                'db_table': 'control_rod_type',
            },
        ),
        migrations.CreateModel(
            name='CoreBaffle',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('time_inserted', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('remark', models.TextField(blank=True)),
                ('gap_to_fuel', models.DecimalField(decimal_places=3, max_digits=7, validators=[django.core.validators.MinValueValidator(0)], help_text='unit:cm')),
                ('outer_diameter', models.DecimalField(decimal_places=3, max_digits=7, validators=[django.core.validators.MinValueValidator(0)], help_text='unit:cm')),
                ('thickness', models.DecimalField(decimal_places=3, validators=[django.core.validators.MinValueValidator(0)], null=True, max_digits=7, blank=True, help_text='unit:cm')),
                ('weight', models.DecimalField(decimal_places=3, validators=[django.core.validators.MinValueValidator(0)], null=True, max_digits=7, blank=True, help_text='unit:Kg')),
            ],
            options={
                'db_table': 'core_baffle',
            },
        ),
        migrations.CreateModel(
            name='CoreBarrel',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('time_inserted', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('remark', models.TextField(blank=True)),
                ('outer_diameter', models.DecimalField(decimal_places=3, max_digits=7, validators=[django.core.validators.MinValueValidator(0)], help_text='unit:cm')),
                ('inner_diameter', models.DecimalField(decimal_places=3, max_digits=7, validators=[django.core.validators.MinValueValidator(0)], help_text='unit:cm')),
            ],
            options={
                'db_table': 'core_barrel',
            },
        ),
        migrations.CreateModel(
            name='CoreLowerPlate',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('time_inserted', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('remark', models.TextField(blank=True)),
                ('weight', models.DecimalField(decimal_places=3, max_digits=7, validators=[django.core.validators.MinValueValidator(0)], help_text='unit:Kg')),
            ],
            options={
                'db_table': 'core_lower_plate',
            },
        ),
        migrations.CreateModel(
            name='CoreUpperPlate',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('time_inserted', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('remark', models.TextField(blank=True)),
                ('weight', models.DecimalField(decimal_places=3, max_digits=7, validators=[django.core.validators.MinValueValidator(0)], help_text='unit:Kg')),
            ],
            options={
                'db_table': 'core_upper_plate',
            },
        ),
        migrations.CreateModel(
            name='Cycle',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('time_inserted', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('remark', models.TextField(blank=True)),
                ('cycle', models.PositiveSmallIntegerField()),
                ('starting_date', models.DateField(blank=True, null=True, help_text='Please use <b>YYYY-MM-DD<b> to input the date')),
                ('shutdown_date', models.DateField(blank=True, null=True, help_text='Please use <b>YYYY-MM-DD<b> to input the date')),
                ('cycle_length', models.DecimalField(decimal_places=3, validators=[django.core.validators.MinValueValidator(0)], null=True, max_digits=7, blank=True, help_text='unit:EFPD')),
                ('num_unplanned_shutdowns', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('num_periodical_tests', models.PositiveSmallIntegerField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Operation cycle',
                'db_table': 'cycle',
            },
        ),
        migrations.CreateModel(
            name='Element',
            fields=[
                ('time_inserted', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('remark', models.TextField(blank=True)),
                ('atomic_number', models.PositiveSmallIntegerField(primary_key=True, serialize=False)),
                ('symbol', models.CharField(unique=True, max_length=8)),
                ('nameCH', models.CharField(max_length=8)),
                ('nameEN', models.CharField(max_length=40)),
                ('reference', models.CharField(default='IUPAC', max_length=80)),
            ],
            options={
                'db_table': 'element',
                'ordering': ['atomic_number'],
            },
        ),
        migrations.CreateModel(
            name='FakeFuelElementType',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('time_inserted', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('remark', models.TextField(blank=True)),
                ('overall_length', models.DecimalField(decimal_places=3, max_digits=7, validators=[django.core.validators.MinValueValidator(0)], help_text='unit:cm')),
                ('outer_diameter', models.DecimalField(decimal_places=3, max_digits=7, validators=[django.core.validators.MinValueValidator(0)], help_text='unit:cm')),
                ('inner_diameter', models.DecimalField(decimal_places=3, max_digits=7, validators=[django.core.validators.MinValueValidator(0)], help_text='unit:cm')),
                ('pellet_outer_diameter', models.DecimalField(decimal_places=3, max_digits=7, validators=[django.core.validators.MinValueValidator(0)], help_text='unit:cm')),
                ('pellet_height', models.DecimalField(decimal_places=3, max_digits=7, validators=[django.core.validators.MinValueValidator(0)], help_text='unit:cm')),
            ],
            options={
                'db_table': 'fake_fuel_element_type',
            },
        ),
        migrations.CreateModel(
            name='FuelAssemblyLoadingPattern',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('time_inserted', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('remark', models.TextField(blank=True)),
                ('following_index', models.CharField(blank=True, max_length=60, null=True)),
                ('rotation_degree', models.CharField(default='0', choices=[('0', '0'), ('90', '90'), ('180', '180'), ('270', '270')], max_length=3, help_text='anticlokwise')),
                ('cycle', models.ForeignKey(related_name='fuel_assembly_loading_patterns', to='tragopan.Cycle')),
            ],
            options={
                'verbose_name': 'Incore fuel loading pattern',
                'db_table': 'fuel_assembly_loading_pattern',
            },
        ),
        migrations.CreateModel(
            name='FuelAssemblyModel',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('time_inserted', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('remark', models.TextField(blank=True)),
                ('name', models.CharField(max_length=20)),
                ('overall_length', models.DecimalField(decimal_places=3, max_digits=7, validators=[django.core.validators.MinValueValidator(0)], help_text='unit:cm')),
                ('side_length', models.DecimalField(decimal_places=3, max_digits=7, validators=[django.core.validators.MinValueValidator(0)], help_text='unit:cm')),
                ('assembly_pitch', models.DecimalField(decimal_places=4, max_digits=7, validators=[django.core.validators.MinValueValidator(0)], help_text='unit:cm')),
                ('pin_pitch', models.DecimalField(decimal_places=3, max_digits=7, validators=[django.core.validators.MinValueValidator(0)], help_text='unit:cm')),
                ('lower_gap', models.DecimalField(decimal_places=3, max_digits=7, validators=[django.core.validators.MinValueValidator(0)], help_text='unit:cm')),
                ('upper_gap', models.DecimalField(decimal_places=3, max_digits=7, validators=[django.core.validators.MinValueValidator(0)], help_text='unit:cm')),
                ('licensed_max_discharge_BU', models.DecimalField(decimal_places=5, validators=[django.core.validators.MinValueValidator(0)], null=True, max_digits=15, blank=True, help_text='MWd/tU')),
                ('licensed_pin_discharge_BU', models.DecimalField(decimal_places=5, validators=[django.core.validators.MinValueValidator(0)], null=True, max_digits=15, blank=True, help_text='MWd/tU')),
            ],
            options={
                'db_table': 'fuel_assembly_model',
            },
        ),
        migrations.CreateModel(
            name='FuelAssemblyPosition',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('time_inserted', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('remark', models.TextField(blank=True)),
                ('row', models.PositiveSmallIntegerField()),
                ('column', models.PositiveSmallIntegerField()),
                ('type', models.CharField(default='fuel', choices=[('fuel', 'fuel element tube'), ('guide', 'guide tube'), ('instrument', 'instrument tube')], max_length=10)),
                ('fuel_assembly_model', models.ForeignKey(related_query_name='position', related_name='positions', to='tragopan.FuelAssemblyModel')),
            ],
            options={
                'verbose_name': 'Intra-assembly rod pattern',
                'db_table': 'fuel_assembly_position',
            },
        ),
        migrations.CreateModel(
            name='FuelAssemblyRepository',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('time_inserted', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('remark', models.TextField(blank=True)),
                ('PN', models.CharField(blank=True, unique=True, max_length=50, null=True)),
                ('batch_number', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('manufacturing_date', models.DateField(blank=True, null=True, help_text='Please use <b>YYYY-MM-DD<b> to input the date')),
                ('arrival_date', models.DateField(blank=True, null=True, help_text='Please use <b>YYYY-MM-DD<b> to input the date')),
                ('availability', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'fuel_assembly_repository',
                'verbose_name_plural': 'Fuel assembly repository',
            },
        ),
        migrations.CreateModel(
            name='FuelAssemblyType',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('time_inserted', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('remark', models.TextField(blank=True)),
                ('assembly_enrichment', models.DecimalField(decimal_places=3, validators=[django.core.validators.MinValueValidator(0)], null=True, max_digits=4, blank=True, help_text='meaningful only if using the one unique enrichment fuel')),
            ],
            options={
                'db_table': 'fuel_assembly_type',
            },
        ),
        migrations.CreateModel(
            name='FuelElement',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('time_inserted', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('remark', models.TextField(blank=True)),
                ('overall_length', models.DecimalField(decimal_places=3, max_digits=7, validators=[django.core.validators.MinValueValidator(0)], help_text='unit:cm')),
                ('active_length', models.DecimalField(decimal_places=3, validators=[django.core.validators.MinValueValidator(0)], null=True, max_digits=7, blank=True, help_text='unit:cm')),
                ('plenum_length', models.DecimalField(decimal_places=3, validators=[django.core.validators.MinValueValidator(0)], null=True, max_digits=7, blank=True, help_text='unit:cm')),
                ('filling_gas_pressure', models.DecimalField(decimal_places=5, validators=[django.core.validators.MinValueValidator(0)], null=True, max_digits=10, blank=True, help_text='unit:MPa')),
            ],
            options={
                'db_table': 'fuel_element',
            },
        ),
        migrations.CreateModel(
            name='FuelElementPelletLoadingScheme',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('time_inserted', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('remark', models.TextField(blank=True)),
                ('section', models.DecimalField(decimal_places=3, max_digits=7, validators=[django.core.validators.MinValueValidator(0)], help_text='unit:cm height base on bottom')),
            ],
            options={
                'db_table': 'fuel_element_pellet_loading_scheme',
            },
        ),
        migrations.CreateModel(
            name='FuelElementType',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('time_inserted', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('remark', models.TextField(blank=True)),
                ('model', models.ForeignKey(to='tragopan.FuelElement')),
            ],
            options={
                'db_table': 'fuel_element_type',
            },
        ),
        migrations.CreateModel(
            name='FuelElementTypePosition',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('time_inserted', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('remark', models.TextField(blank=True)),
                ('fuel_assembly_position', models.ForeignKey(to='tragopan.FuelAssemblyPosition')),
                ('fuel_assembly_type', models.ForeignKey(related_query_name='position', related_name='positions', to='tragopan.FuelAssemblyType')),
                ('fuel_element_type', models.ForeignKey(to='tragopan.FuelElementType')),
            ],
            options={
                'verbose_name': 'Intra-assembly fuel element loading pattern',
                'db_table': 'fuel_element_type_position',
            },
        ),
        migrations.CreateModel(
            name='FuelPellet',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('time_inserted', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('remark', models.TextField(blank=True)),
                ('outer_diameter', models.DecimalField(decimal_places=5, max_digits=7, validators=[django.core.validators.MinValueValidator(0)], help_text='unit:cm')),
                ('inner_diameter', models.DecimalField(decimal_places=5, validators=[django.core.validators.MinValueValidator(0)], null=True, max_digits=7, blank=True, help_text='unit:cm can be none when hollow')),
                ('length', models.DecimalField(decimal_places=5, max_digits=7, validators=[django.core.validators.MinValueValidator(0)], help_text='unit:cm')),
                ('dish_volume_percentage', models.DecimalField(decimal_places=6, validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(0)], null=True, max_digits=9, blank=True, help_text='unit:%')),
                ('chamfer_volume_percentage', models.DecimalField(decimal_places=6, validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(0)], null=True, max_digits=9, blank=True, help_text='unit:%')),
                ('dish_depth', models.DecimalField(decimal_places=5, validators=[django.core.validators.MinValueValidator(0)], null=True, max_digits=7, blank=True, help_text='unit:cm')),
                ('dish_diameter', models.DecimalField(decimal_places=5, validators=[django.core.validators.MinValueValidator(0)], null=True, max_digits=7, blank=True, help_text='unit:cm')),
                ('roughness', models.DecimalField(decimal_places=6, validators=[django.core.validators.MinValueValidator(0)], null=True, max_digits=7, blank=True, help_text='unit:cm')),
                ('nominal_density', models.DecimalField(decimal_places=5, max_digits=8, validators=[django.core.validators.MinValueValidator(0)], help_text='unit:g/cm3')),
                ('uncertainty_percentage', models.DecimalField(decimal_places=6, validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(0)], null=True, max_digits=9, blank=True, help_text='unit:%')),
                ('coating_thickness', models.DecimalField(decimal_places=5, validators=[django.core.validators.MinValueValidator(0)], null=True, max_digits=7, blank=True, help_text='unit:cm')),
            ],
            options={
                'db_table': 'fuel_pellet',
            },
        ),
        migrations.CreateModel(
            name='FuelPelletType',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('time_inserted', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('remark', models.TextField(blank=True)),
            ],
            options={
                'db_table': 'fuel_pellet_type',
            },
        ),
        migrations.CreateModel(
            name='Grid',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('time_inserted', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('remark', models.TextField(blank=True)),
                ('name', models.CharField(max_length=50)),
                ('side_length', models.DecimalField(decimal_places=5, validators=[django.core.validators.MinValueValidator(0)], null=True, max_digits=10, blank=True, help_text='cm')),
                ('sleeve_height', models.DecimalField(decimal_places=5, max_digits=15, validators=[django.core.validators.MinValueValidator(0)], help_text='cm')),
                ('inner_sleeve_thickness', models.DecimalField(decimal_places=5, validators=[django.core.validators.MinValueValidator(0)], null=True, max_digits=10, blank=True, help_text='cm')),
                ('outer_sleeve_thickness', models.DecimalField(decimal_places=5, validators=[django.core.validators.MinValueValidator(0)], null=True, max_digits=10, blank=True, help_text='cm')),
                ('spring_thickness', models.DecimalField(decimal_places=5, validators=[django.core.validators.MinValueValidator(0)], null=True, max_digits=10, blank=True, help_text='cm')),
                ('functionality', models.CharField(default='fix', choices=[('blend', 'blend'), ('fix', 'fix')], max_length=5)),
                ('fuel_assembly_model', models.ForeignKey(related_name='fuel_assembly_grids', to='tragopan.FuelAssemblyModel')),
            ],
            options={
                'verbose_name': 'Fuel grid',
                'db_table': 'grid',
            },
        ),
        migrations.CreateModel(
            name='GridPosition',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('time_inserted', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('remark', models.TextField(blank=True)),
                ('height', models.DecimalField(decimal_places=5, max_digits=10, validators=[django.core.validators.MinValueValidator(0)], help_text='unit:cm Base on bottom of fuel')),
                ('fuel_assembly_model', models.ForeignKey(related_name='grids', to='tragopan.FuelAssemblyModel')),
                ('grid', models.ForeignKey(to='tragopan.Grid')),
            ],
            options={
                'db_table': 'grid_position',
            },
        ),
        migrations.CreateModel(
            name='GuideTube',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('time_inserted', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('remark', models.TextField(blank=True)),
                ('upper_outer_diameter', models.DecimalField(decimal_places=3, max_digits=7, validators=[django.core.validators.MinValueValidator(0)], help_text='unit:cm')),
                ('upper_inner_diameter', models.DecimalField(decimal_places=3, max_digits=7, validators=[django.core.validators.MinValueValidator(0)], help_text='unit:cm')),
                ('buffer_outer_diameter', models.DecimalField(decimal_places=3, max_digits=7, validators=[django.core.validators.MinValueValidator(0)], null=True, help_text='unit:cm')),
                ('buffer_inner_diameter', models.DecimalField(decimal_places=3, max_digits=7, validators=[django.core.validators.MinValueValidator(0)], null=True, help_text='unit:cm')),
                ('fuel_assembly_model', models.OneToOneField(to='tragopan.FuelAssemblyModel')),
            ],
            options={
                'db_table': 'guide_tube',
            },
        ),
        migrations.CreateModel(
            name='InstrumentTube',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('time_inserted', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('remark', models.TextField(blank=True)),
                ('outer_diameter', models.DecimalField(decimal_places=3, max_digits=7, validators=[django.core.validators.MinValueValidator(0)], help_text='unit:cm')),
                ('inner_diameter', models.DecimalField(decimal_places=3, max_digits=7, validators=[django.core.validators.MinValueValidator(0)], help_text='unit:cm')),
                ('fuel_assembly_model', models.OneToOneField(to='tragopan.FuelAssemblyModel')),
            ],
            options={
                'db_table': 'instrument_tube',
            },
        ),
        migrations.CreateModel(
            name='LowerCap',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('time_inserted', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('remark', models.TextField(blank=True)),
                ('height', models.DecimalField(decimal_places=3, max_digits=7, validators=[django.core.validators.MinValueValidator(0)], help_text='unit:cm')),
                ('weight', models.DecimalField(decimal_places=3, max_digits=7, validators=[django.core.validators.MinValueValidator(0)], help_text='unit:cm')),
                ('fuel_element', models.OneToOneField(to='tragopan.FuelElement')),
            ],
            options={
                'db_table': 'lower_cap',
            },
        ),
        migrations.CreateModel(
            name='LowerNozzle',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('time_inserted', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('remark', models.TextField(blank=True)),
                ('pitch', models.DecimalField(decimal_places=3, max_digits=7, validators=[django.core.validators.MinValueValidator(0)], help_text='unit:cm')),
                ('plate_thickness', models.DecimalField(decimal_places=3, max_digits=7, validators=[django.core.validators.MinValueValidator(0)], help_text='unit:cm')),
                ('plate_porosity', models.DecimalField(decimal_places=6, max_digits=9, validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(0)], help_text='unit:%')),
                ('height', models.DecimalField(decimal_places=3, max_digits=7, validators=[django.core.validators.MinValueValidator(0)], help_text='unit:cm')),
                ('weight', models.DecimalField(decimal_places=3, max_digits=7, validators=[django.core.validators.MinValueValidator(0)], help_text='unit:cm')),
                ('fuel_assembly_model', models.OneToOneField(to='tragopan.FuelAssemblyModel')),
            ],
            options={
                'db_table': 'lower_nozzle',
            },
        ),
        migrations.CreateModel(
            name='Material',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('time_inserted', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('remark', models.TextField(blank=True)),
                ('nameCH', models.CharField(max_length=40)),
                ('nameEN', models.CharField(max_length=40)),
                ('prerobin_identifier', models.CharField(blank=True, max_length=20)),
            ],
            options={
                'verbose_name': 'Material repository',
                'db_table': 'material',
                'verbose_name_plural': 'Material repository',
            },
        ),
        migrations.CreateModel(
            name='MaterialAttribute',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('time_inserted', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('remark', models.TextField(blank=True)),
                ('density', models.DecimalField(decimal_places=5, max_digits=15, help_text='unit:g/cm3')),
                ('heat_capacity', models.DecimalField(blank=True, decimal_places=5, max_digits=15, null=True, help_text='J/kg*K')),
                ('thermal_conductivity', models.DecimalField(blank=True, decimal_places=5, max_digits=15, null=True, help_text='W/m*K')),
                ('expansion_coefficient', models.DecimalField(blank=True, decimal_places=5, max_digits=15, null=True, help_text='m/K')),
                ('code', models.CharField(blank=True, max_length=10)),
                ('material', models.OneToOneField(related_name='attribute', to='tragopan.Material')),
            ],
            options={
                'db_table': 'material_attribute',
            },
        ),
        migrations.CreateModel(
            name='MaterialComposition',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('time_inserted', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('remark', models.TextField(blank=True)),
                ('weight_percent', models.DecimalField(decimal_places=6, validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(0)], null=True, max_digits=9, blank=True, help_text='unit:%')),
                ('element_number', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('material', models.ForeignKey(related_query_name='element', related_name='elements', to='tragopan.Material')),
            ],
            options={
                'db_table': 'material_composition',
            },
        ),
        migrations.CreateModel(
            name='MixtureComposition',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('time_inserted', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('remark', models.TextField(blank=True)),
                ('weight_percent', models.DecimalField(decimal_places=6, max_digits=9, validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(0)], help_text='unit:%')),
                ('material', models.ForeignKey(to='tragopan.Material')),
                ('mixture', models.ForeignKey(related_query_name='mixture', related_name='mixtures', to='tragopan.Material')),
            ],
            options={
                'db_table': 'mixture_composition',
            },
        ),
        migrations.CreateModel(
            name='NozzlePlugAssembly',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('time_inserted', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('remark', models.TextField(blank=True)),
                ('weight', models.DecimalField(decimal_places=3, max_digits=7, validators=[django.core.validators.MinValueValidator(0)], help_text='unit:Kg')),
            ],
            options={
                'db_table': 'nozzle_plug_assembly',
                'verbose_name_plural': 'Nozzle plug assemblies',
            },
        ),
        migrations.CreateModel(
            name='NozzlePlugRod',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('time_inserted', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('remark', models.TextField(blank=True)),
                ('length', models.DecimalField(decimal_places=3, max_digits=7, validators=[django.core.validators.MinValueValidator(0)], help_text='unit:cm')),
                ('diameter', models.DecimalField(decimal_places=3, max_digits=7, validators=[django.core.validators.MinValueValidator(0)], help_text='unit:cm')),
                ('fuel_assembly_model', models.OneToOneField(to='tragopan.FuelAssemblyModel')),
                ('material', models.ForeignKey(to='tragopan.Material')),
            ],
            options={
                'db_table': 'nozzle_plug_rod',
            },
        ),
        migrations.CreateModel(
            name='NozzlePlugRodMap',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('time_inserted', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('remark', models.TextField(blank=True)),
                ('guid_tube_position', models.OneToOneField(to='tragopan.FuelAssemblyPosition')),
                ('nozzle_plug_assembly', models.ForeignKey(to='tragopan.NozzlePlugAssembly')),
                ('nozzle_plug_rod', models.ForeignKey(to='tragopan.NozzlePlugRod')),
            ],
            options={
                'db_table': 'nozzle_plug_rod_map',
            },
        ),
        migrations.CreateModel(
            name='Nuclide',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('time_inserted', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('remark', models.TextField(blank=True)),
                ('atom_mass', models.DecimalField(decimal_places=6, validators=[django.core.validators.MinValueValidator(0)], max_digits=9)),
                ('abundance', models.DecimalField(decimal_places=6, max_digits=9, validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(0)], help_text='unit:%')),
                ('reference', models.CharField(default='IUPAC', max_length=80)),
                ('element', models.ForeignKey(related_query_name='nuclide', related_name='nuclides', to_field='symbol', to='tragopan.Element')),
            ],
            options={
                'db_table': 'nuclide',
                'ordering': ['element'],
            },
        ),
        migrations.CreateModel(
            name='OperationParameter',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('time_inserted', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('remark', models.TextField(blank=True)),
                ('date', models.DateField(blank=True, null=True, help_text='Please use <b>YYYY-MM-DD<b> to input the date')),
                ('burnup', models.DecimalField(decimal_places=5, max_digits=15, validators=[django.core.validators.MinValueValidator(0)], help_text='unit:MWd/tU')),
                ('relative_power', models.DecimalField(decimal_places=9, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], max_digits=10)),
                ('critical_boron_density', models.DecimalField(decimal_places=5, max_digits=10, validators=[django.core.validators.MinValueValidator(0)], help_text='unit:ppm')),
                ('axial_power_shift', models.DecimalField(decimal_places=6, validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(-100)], null=True, max_digits=9, blank=True, help_text='unit:%FP')),
                ('control_rod_step', models.ManyToManyField(to='tragopan.ControlRodAssembly', through='tragopan.ControlRodAssemblyStep')),
                ('cycle', models.ForeignKey(to='tragopan.Cycle')),
            ],
            options={
                'db_table': 'operation_parameter',
            },
        ),
        migrations.CreateModel(
            name='Plant',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('time_inserted', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('remark', models.TextField(blank=True)),
                ('nameCH', models.CharField(max_length=40)),
                ('abbrCH', models.CharField(max_length=40)),
                ('nameEN', models.CharField(max_length=40)),
                ('abbrEN', models.CharField(max_length=40)),
            ],
            options={
                'db_table': 'plant',
            },
        ),
        migrations.CreateModel(
            name='PlenumSpring',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('time_inserted', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('remark', models.TextField(blank=True)),
                ('weight', models.DecimalField(decimal_places=3, max_digits=10, validators=[django.core.validators.MinValueValidator(0)], help_text='unit:g')),
                ('outer_diameter', models.DecimalField(decimal_places=5, max_digits=7, validators=[django.core.validators.MinValueValidator(0)], help_text='unit:cm')),
                ('wire_diameter', models.DecimalField(decimal_places=5, max_digits=7, validators=[django.core.validators.MinValueValidator(0)], help_text='unit:cm')),
                ('fuel_element', models.OneToOneField(to='tragopan.FuelElement')),
                ('material', models.ForeignKey(to='tragopan.Material')),
            ],
            options={
                'db_table': 'plenum_spring',
            },
        ),
        migrations.CreateModel(
            name='PressureVessel',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('time_inserted', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('remark', models.TextField(blank=True)),
                ('outer_diameter', models.DecimalField(decimal_places=3, max_digits=7, validators=[django.core.validators.MinValueValidator(0)], help_text='unit:cm')),
                ('inner_diameter', models.DecimalField(decimal_places=3, max_digits=7, validators=[django.core.validators.MinValueValidator(0)], help_text='unit:cm')),
                ('weld_thickness', models.DecimalField(decimal_places=3, max_digits=7, validators=[django.core.validators.MinValueValidator(0)], help_text='unit:cm')),
                ('base_material', models.ForeignKey(related_name='pressure_vessel_base', to='tragopan.Material')),
            ],
            options={
                'db_table': 'pressure_vessel',
            },
        ),
        migrations.CreateModel(
            name='PressureVesselInsulation',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('time_inserted', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('remark', models.TextField(blank=True)),
                ('outer_diameter', models.DecimalField(decimal_places=3, max_digits=7, validators=[django.core.validators.MinValueValidator(0)], help_text='unit:cm')),
                ('inner_diameter', models.DecimalField(decimal_places=3, max_digits=7, validators=[django.core.validators.MinValueValidator(0)], help_text='unit:cm')),
                ('material', models.ForeignKey(to='tragopan.Material')),
            ],
            options={
                'db_table': 'pressure_vessel_insulation',
            },
        ),
        migrations.CreateModel(
            name='ReactorModel',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('time_inserted', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('remark', models.TextField(blank=True)),
                ('name', models.CharField(choices=[('CP600', 'CP600'), ('CP300', 'CP300'), ('M310', 'M310'), ('CAP1000', 'CAP1000'), ('AP1000', 'AP1000')], max_length=50)),
                ('generation', models.CharField(choices=[('2', '2'), ('2+', '2+'), ('3', '3')], max_length=2)),
                ('reactor_type', models.CharField(choices=[('PWR', 'PWR'), ('BWR', 'BWR')], max_length=3)),
                ('geometry_type', models.CharField(choices=[('Cartesian', 'Cartesian'), ('Hexagonal', 'Hexagonal')], max_length=9)),
                ('row_symbol', models.CharField(choices=[('Number', 'Number'), ('Letter', 'Letter')], max_length=6)),
                ('column_symbol', models.CharField(choices=[('Number', 'Number'), ('Letter', 'Letter')], max_length=6)),
                ('num_loops', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('fuel_pitch', models.DecimalField(decimal_places=3, validators=[django.core.validators.MinValueValidator(0)], null=True, max_digits=7, blank=True, help_text='unit:cm')),
                ('core_equivalent_diameter', models.DecimalField(decimal_places=3, max_digits=7, validators=[django.core.validators.MinValueValidator(0)], help_text='unit:cm')),
                ('active_height', models.DecimalField(decimal_places=3, max_digits=7, validators=[django.core.validators.MinValueValidator(0)], help_text='unit:cm')),
                ('cold_state_assembly_pitch', models.DecimalField(decimal_places=4, validators=[django.core.validators.MinValueValidator(0)], null=True, max_digits=7, blank=True, help_text='unit:cm')),
                ('hot_state_assembly_pitch', models.DecimalField(decimal_places=4, validators=[django.core.validators.MinValueValidator(0)], null=True, max_digits=7, blank=True, help_text='unit:cm')),
            ],
            options={
                'db_table': 'reactor_model',
            },
        ),
        migrations.CreateModel(
            name='ReactorPosition',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('time_inserted', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('remark', models.TextField(blank=True)),
                ('row', models.PositiveSmallIntegerField()),
                ('column', models.PositiveSmallIntegerField()),
                ('control_rod_mechanism', models.BooleanField(default=False, verbose_name='Whether can be inserted control rod assembly?', help_text='whether contain control rod mechanism')),
                ('reactor_model', models.ForeignKey(related_query_name='position', related_name='positions', to='tragopan.ReactorModel')),
            ],
            options={
                'db_table': 'reactor_position',
                'ordering': ['row', 'column'],
            },
        ),
        migrations.CreateModel(
            name='RipPlate',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('time_inserted', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('remark', models.TextField(blank=True)),
                ('height', models.DecimalField(decimal_places=3, max_digits=7, validators=[django.core.validators.MinValueValidator(0)], help_text='unit:cm')),
                ('thickness', models.DecimalField(decimal_places=3, max_digits=7, validators=[django.core.validators.MinValueValidator(0)], help_text='unit:cm')),
                ('width', models.DecimalField(decimal_places=3, validators=[django.core.validators.MinValueValidator(0)], null=True, max_digits=7, blank=True, help_text='unit:cm')),
                ('core_baffle', models.OneToOneField(to='tragopan.ReactorModel')),
                ('material', models.ForeignKey(to='tragopan.Material')),
            ],
            options={
                'db_table': 'rip_plate',
            },
        ),
        migrations.CreateModel(
            name='SourceAssembly',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('time_inserted', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('remark', models.TextField(blank=True)),
                ('fuel_assembly_model', models.ForeignKey(to='tragopan.FuelAssemblyModel')),
            ],
            options={
                'db_table': 'source_assembly',
                'verbose_name_plural': 'Source assemblies',
            },
        ),
        migrations.CreateModel(
            name='SourceAssemblyLoadingPattern',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('time_inserted', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('remark', models.TextField(blank=True)),
                ('cycle', models.ForeignKey(related_name='source_assembly_positions', to='tragopan.Cycle')),
                ('reactor_position', models.ForeignKey(to='tragopan.ReactorPosition')),
                ('source_assembly', models.ForeignKey(to='tragopan.SourceAssembly')),
            ],
            options={
                'db_table': 'source_assembly_loading_pattern',
            },
        ),
        migrations.CreateModel(
            name='SourceRodMap',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('time_inserted', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('remark', models.TextField(blank=True)),
                ('source_assembly', models.ForeignKey(related_name='source_rod_positions', to='tragopan.SourceAssembly')),
            ],
            options={
                'db_table': 'source_rod_map',
            },
        ),
        migrations.CreateModel(
            name='SourceRodType',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('time_inserted', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('remark', models.TextField(blank=True)),
                ('type', models.CharField(choices=[('primary', 'primary'), ('secondary', 'secondary')], max_length=9)),
                ('overall_length', models.DecimalField(decimal_places=3, validators=[django.core.validators.MinValueValidator(0)], null=True, max_digits=7, blank=True, help_text='unit:cm')),
                ('diameter', models.DecimalField(decimal_places=3, validators=[django.core.validators.MinValueValidator(0)], null=True, max_digits=7, blank=True, help_text='unit:cm')),
                ('strength', models.DecimalField(decimal_places=3, max_digits=7, validators=[django.core.validators.MinValueValidator(0)], help_text='unit:10e8')),
                ('fuel_assembly_model', models.ForeignKey(to='tragopan.FuelAssemblyModel')),
                ('material', models.ForeignKey(to='tragopan.Material', null=True, blank=True)),
            ],
            options={
                'db_table': 'source_rod_type',
            },
        ),
        migrations.CreateModel(
            name='ThermalShield',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('time_inserted', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('remark', models.TextField(blank=True)),
                ('height', models.DecimalField(decimal_places=3, max_digits=7, validators=[django.core.validators.MinValueValidator(0)], help_text='unit:cm')),
                ('outer_diameter', models.DecimalField(decimal_places=3, max_digits=7, validators=[django.core.validators.MinValueValidator(0)], help_text='unit:cm')),
                ('inner_diameter', models.DecimalField(decimal_places=3, max_digits=7, validators=[django.core.validators.MinValueValidator(0)], help_text='unit:cm')),
                ('angle', models.DecimalField(decimal_places=3, max_digits=7, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(360)], help_text='unit:degree')),
                ('loc_height', models.DecimalField(decimal_places=3, max_digits=7, validators=[django.core.validators.MinValueValidator(0)], help_text='unit:cm')),
                ('loc_theta', models.DecimalField(decimal_places=3, max_digits=7, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(360)], help_text='unit:degree')),
                ('gap_to_barrel', models.DecimalField(decimal_places=3, max_digits=7, validators=[django.core.validators.MinValueValidator(0)], help_text='unit:cm')),
                ('material', models.ForeignKey(to='tragopan.Material')),
                ('reactor_model', models.ForeignKey(to='tragopan.ReactorModel')),
            ],
            options={
                'db_table': 'thermal_shield',
            },
        ),
        migrations.CreateModel(
            name='UnitParameter',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('time_inserted', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('remark', models.TextField(blank=True)),
                ('unit', models.PositiveSmallIntegerField()),
                ('electric_power', models.DecimalField(decimal_places=3, max_digits=10, validators=[django.core.validators.MinValueValidator(0)], help_text='unit:MW')),
                ('thermal_power', models.DecimalField(decimal_places=3, max_digits=10, validators=[django.core.validators.MinValueValidator(0)], help_text='unit:MW')),
                ('heat_fraction_in_fuel', models.DecimalField(decimal_places=6, max_digits=9, validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(0)], help_text='unit:%')),
                ('primary_system_pressure', models.DecimalField(decimal_places=5, max_digits=15, validators=[django.core.validators.MinValueValidator(0)], help_text='unit:MPa')),
                ('ave_linear_power_density', models.DecimalField(decimal_places=5, max_digits=15, validators=[django.core.validators.MinValueValidator(0)], help_text='unit:KW/m')),
                ('ave_vol_power_density', models.DecimalField(decimal_places=5, validators=[django.core.validators.MinValueValidator(0)], null=True, max_digits=15, blank=True, help_text='unit:KW/L')),
                ('ave_mass_power_density', models.DecimalField(decimal_places=5, validators=[django.core.validators.MinValueValidator(0)], null=True, max_digits=15, blank=True, help_text='unit:KW/Kg (fuel)')),
                ('best_estimated_cool_vol_flow_rate', models.DecimalField(decimal_places=5, validators=[django.core.validators.MinValueValidator(0)], null=True, max_digits=15, blank=True, help_text='unit:m3/h')),
                ('best_estimated_cool_mass_flow_rate', models.DecimalField(decimal_places=5, validators=[django.core.validators.MinValueValidator(0)], null=True, max_digits=15, blank=True, help_text='unit:kg/h')),
                ('coolant_volume', models.DecimalField(decimal_places=5, validators=[django.core.validators.MinValueValidator(0)], null=True, max_digits=20, blank=True, help_text='unit:m3')),
                ('bypass_flow_fraction', models.DecimalField(decimal_places=6, validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(0)], null=True, max_digits=9, blank=True, help_text='unit:%')),
                ('cold_state_cool_temp', models.DecimalField(decimal_places=5, max_digits=15, validators=[django.core.validators.MinValueValidator(0)], help_text='unit:K')),
                ('HZP_cool_inlet_temp', models.DecimalField(decimal_places=5, max_digits=15, validators=[django.core.validators.MinValueValidator(0)], help_text='unit:K')),
                ('HFP_cool_inlet_temp', models.DecimalField(decimal_places=5, max_digits=15, validators=[django.core.validators.MinValueValidator(0)], help_text='unit:K')),
                ('HFP_core_ave_cool_temp', models.DecimalField(decimal_places=5, validators=[django.core.validators.MinValueValidator(0)], null=True, max_digits=15, blank=True, help_text='unit:K')),
                ('mid_power_cool_inlet_temp', models.DecimalField(decimal_places=5, validators=[django.core.validators.MinValueValidator(0)], null=True, max_digits=15, blank=True, help_text='unit:K')),
                ('plant', models.ForeignKey(related_name='units', to='tragopan.Plant')),
                ('reactor_model', models.ForeignKey(to='tragopan.ReactorModel')),
            ],
            options={
                'db_table': 'unit_parameter',
            },
        ),
        migrations.CreateModel(
            name='UpperCap',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('time_inserted', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('remark', models.TextField(blank=True)),
                ('height', models.DecimalField(decimal_places=3, max_digits=7, validators=[django.core.validators.MinValueValidator(0)], help_text='unit:cm')),
                ('weight', models.DecimalField(decimal_places=3, max_digits=7, validators=[django.core.validators.MinValueValidator(0)], help_text='unit:cm')),
                ('fuel_element_type', models.OneToOneField(to='tragopan.FuelElement')),
                ('material', models.ForeignKey(to='tragopan.Material')),
            ],
            options={
                'db_table': 'upper_cap',
            },
        ),
        migrations.CreateModel(
            name='UpperNozzle',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('time_inserted', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('remark', models.TextField(blank=True)),
                ('pitch', models.DecimalField(decimal_places=3, max_digits=7, validators=[django.core.validators.MinValueValidator(0)], help_text='unit:cm')),
                ('plate_thickness', models.DecimalField(decimal_places=3, max_digits=7, validators=[django.core.validators.MinValueValidator(0)], help_text='unit:cm')),
                ('plate_porosity', models.DecimalField(decimal_places=6, max_digits=9, validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(0)], help_text='unit:%')),
                ('height', models.DecimalField(decimal_places=3, max_digits=7, validators=[django.core.validators.MinValueValidator(0)], help_text='unit:cm')),
                ('weight', models.DecimalField(decimal_places=3, max_digits=7, validators=[django.core.validators.MinValueValidator(0)], help_text='unit:cm')),
                ('fuel_assembly_model', models.OneToOneField(to='tragopan.FuelAssemblyModel')),
                ('material', models.ForeignKey(to='tragopan.Material')),
            ],
            options={
                'db_table': 'upper_nozzle',
            },
        ),
        migrations.CreateModel(
            name='Vendor',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('time_inserted', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('remark', models.TextField(blank=True)),
                ('nameCH', models.CharField(max_length=40)),
                ('abbrCH', models.CharField(max_length=40)),
                ('nameEN', models.CharField(max_length=40)),
                ('abbrEN', models.CharField(max_length=40)),
                ('type', models.CharField(default='Designer', choices=[('Designer', 'Designer'), ('Manufacturer', 'Manufacturer'), ('Material', 'Material')], max_length=12)),
            ],
            options={
                'db_table': 'vendor',
            },
        ),
        migrations.CreateModel(
            name='WimsNuclideData',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('time_inserted', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('remark', models.TextField(blank=True)),
                ('nuclide_name', models.CharField(max_length=30)),
                ('id_wims', models.PositiveIntegerField(unique=True)),
                ('id_self_defined', models.PositiveIntegerField(blank=True, unique=True, null=True)),
                ('amu', models.DecimalField(decimal_places=6, validators=[django.core.validators.MinValueValidator(0)], max_digits=9)),
                ('nf', models.PositiveSmallIntegerField(choices=[(0, '无共振积分表'), (1, '有共振积分表的非裂变核'), (2, '有共振吸收共振积分表的可裂变核'), (3, '有共振吸收和共振裂变共振积分表的可裂变核'), (4, '没有共振积分表的可裂变核')])),
                ('material_type', models.CharField(choices=[('M', '慢化剂'), ('FP', '裂变产物'), ('A', '锕系核素'), ('B', '可燃核素'), ('D', '用于剂量的材料'), ('S', '结构材料和其他'), ('B/FP', '可燃核素 /裂变产物')], max_length=4)),
                ('descrip', models.CharField(max_length=50)),
                ('element', models.ForeignKey(to='tragopan.Element', null=True, blank=True)),
            ],
            options={
                'db_table': 'wims_nuclide_data',
            },
        ),
        migrations.CreateModel(
            name='WmisElementComposition',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('time_inserted', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('remark', models.TextField(blank=True)),
                ('weight_percent', models.DecimalField(decimal_places=6, max_digits=9, validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(0)], help_text='unit:%')),
            ],
            options={
                'db_table': 'wmis_element_composition',
            },
        ),
        migrations.CreateModel(
            name='WmisElementData',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('time_inserted', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('remark', models.TextField(blank=True)),
                ('element_name', models.CharField(max_length=30)),
                ('composition', models.ManyToManyField(to='tragopan.WimsNuclideData', through='tragopan.WmisElementComposition')),
            ],
            options={
                'db_table': 'wmis_element_data',
            },
        ),
        migrations.AddField(
            model_name='wmiselementcomposition',
            name='wmis_element',
            field=models.ForeignKey(related_name='nuclides', to='tragopan.WmisElementData'),
        ),
        migrations.AddField(
            model_name='wmiselementcomposition',
            name='wmis_nuclide',
            field=models.ForeignKey(to='tragopan.WimsNuclideData'),
        ),
        migrations.AddField(
            model_name='thermalshield',
            name='vendor',
            field=models.ForeignKey(to='tragopan.Vendor'),
        ),
        migrations.AddField(
            model_name='sourcerodmap',
            name='source_rod',
            field=models.ForeignKey(to='tragopan.SourceRodType'),
        ),
        migrations.AddField(
            model_name='sourcerodmap',
            name='source_rod_position',
            field=models.ForeignKey(to='tragopan.FuelAssemblyPosition'),
        ),
        migrations.AddField(
            model_name='sourceassembly',
            name='source_rod_map',
            field=models.ManyToManyField(to='tragopan.FuelAssemblyPosition', through='tragopan.SourceRodMap'),
        ),
        migrations.AddField(
            model_name='reactormodel',
            name='incore_instrument_position',
            field=models.ManyToManyField(blank=True, related_name='incore_instrument_position', db_table='incore_instrument_map', to='tragopan.ReactorPosition'),
        ),
        migrations.AddField(
            model_name='reactormodel',
            name='thermal_couple_position',
            field=models.ManyToManyField(blank=True, related_name='thermal_couple_position', db_table='thermal_couple_map', to='tragopan.ReactorPosition'),
        ),
        migrations.AddField(
            model_name='reactormodel',
            name='vendor',
            field=models.ForeignKey(to='tragopan.Vendor'),
        ),
        migrations.AddField(
            model_name='pressurevesselinsulation',
            name='reactor_model',
            field=models.OneToOneField(to='tragopan.ReactorModel'),
        ),
        migrations.AddField(
            model_name='pressurevesselinsulation',
            name='vendor',
            field=models.ForeignKey(to='tragopan.Vendor'),
        ),
        migrations.AddField(
            model_name='pressurevessel',
            name='reactor_model',
            field=models.OneToOneField(to='tragopan.ReactorModel'),
        ),
        migrations.AddField(
            model_name='pressurevessel',
            name='vendor',
            field=models.ForeignKey(to='tragopan.Vendor'),
        ),
        migrations.AddField(
            model_name='pressurevessel',
            name='weld_material',
            field=models.ForeignKey(related_name='pressure_vessel_weld', to='tragopan.Material'),
        ),
        migrations.AddField(
            model_name='nozzleplugassembly',
            name='nozzle_plug_rod',
            field=models.ManyToManyField(to='tragopan.NozzlePlugRod', through='tragopan.NozzlePlugRodMap'),
        ),
        migrations.AddField(
            model_name='materialcomposition',
            name='wims_element_data',
            field=models.ForeignKey(to='tragopan.WmisElementData', null=True, blank=True),
        ),
        migrations.AddField(
            model_name='material',
            name='material_composition',
            field=models.ManyToManyField(to='tragopan.WmisElementData', through='tragopan.MaterialComposition'),
        ),
        migrations.AddField(
            model_name='material',
            name='mixture_composition',
            field=models.ManyToManyField(to='tragopan.Material', through='tragopan.MixtureComposition'),
        ),
        migrations.AddField(
            model_name='lowernozzle',
            name='material',
            field=models.ForeignKey(to='tragopan.Material'),
        ),
        migrations.AddField(
            model_name='lowercap',
            name='material',
            field=models.ForeignKey(to='tragopan.Material'),
        ),
        migrations.AddField(
            model_name='instrumenttube',
            name='material',
            field=models.ForeignKey(to='tragopan.Material'),
        ),
        migrations.AddField(
            model_name='guidetube',
            name='material',
            field=models.ForeignKey(to='tragopan.Material'),
        ),
        migrations.AddField(
            model_name='grid',
            name='sleeve_material',
            field=models.ForeignKey(related_query_name='grid_sleeve', related_name='grid_sleeves', to='tragopan.Material', null=True, blank=True),
        ),
        migrations.AddField(
            model_name='grid',
            name='spring_material',
            field=models.ForeignKey(related_query_name='grid_spring', related_name='grid_springs', to='tragopan.Material', null=True, blank=True),
        ),
        migrations.AddField(
            model_name='fuelpellettype',
            name='material',
            field=models.ForeignKey(related_name='fuel_pellet_material', to='tragopan.Material'),
        ),
        migrations.AddField(
            model_name='fuelpellettype',
            name='model',
            field=models.ForeignKey(to='tragopan.FuelPellet'),
        ),
        migrations.AddField(
            model_name='fuelpellet',
            name='coating_material',
            field=models.ForeignKey(related_name='fuel_pellet_coating', to='tragopan.Material', null=True, blank=True),
        ),
        migrations.AddField(
            model_name='fuelpellet',
            name='fuel_assembly_model',
            field=models.OneToOneField(to='tragopan.FuelAssemblyModel'),
        ),
        migrations.AddField(
            model_name='fuelelementtype',
            name='pellet',
            field=models.ManyToManyField(to='tragopan.FuelPelletType', through='tragopan.FuelElementPelletLoadingScheme'),
        ),
        migrations.AddField(
            model_name='fuelelementpelletloadingscheme',
            name='fuel_element_type',
            field=models.ForeignKey(related_name='fuel_pellet_map', to='tragopan.FuelElementType'),
        ),
        migrations.AddField(
            model_name='fuelelementpelletloadingscheme',
            name='fuel_pellet_type',
            field=models.ForeignKey(to='tragopan.FuelPelletType'),
        ),
        migrations.AddField(
            model_name='fuelelement',
            name='filling_gas_material',
            field=models.ForeignKey(to='tragopan.Material', null=True, blank=True),
        ),
        migrations.AddField(
            model_name='fuelelement',
            name='fuel_assembly_model',
            field=models.OneToOneField(related_name='fuel_elements', to='tragopan.FuelAssemblyModel'),
        ),
        migrations.AddField(
            model_name='fuelassemblytype',
            name='fuel_element_type_position',
            field=models.ManyToManyField(to='tragopan.FuelElementType', through='tragopan.FuelElementTypePosition'),
        ),
        migrations.AddField(
            model_name='fuelassemblytype',
            name='model',
            field=models.ForeignKey(to='tragopan.FuelAssemblyModel'),
        ),
        migrations.AddField(
            model_name='fuelassemblyrepository',
            name='plant',
            field=models.ForeignKey(to='tragopan.Plant'),
        ),
        migrations.AddField(
            model_name='fuelassemblyrepository',
            name='type',
            field=models.ForeignKey(to='tragopan.FuelAssemblyType'),
        ),
        migrations.AddField(
            model_name='fuelassemblyrepository',
            name='vendor',
            field=models.ForeignKey(default=1, to='tragopan.Vendor'),
        ),
        migrations.AddField(
            model_name='fuelassemblymodel',
            name='vendor',
            field=models.ForeignKey(to='tragopan.Vendor'),
        ),
        migrations.AddField(
            model_name='fuelassemblyloadingpattern',
            name='fuel_assembly',
            field=models.ForeignKey(default=1, related_name='cycle_positions', to='tragopan.FuelAssemblyRepository'),
        ),
        migrations.AddField(
            model_name='fuelassemblyloadingpattern',
            name='reactor_position',
            field=models.ForeignKey(to='tragopan.ReactorPosition'),
        ),
        migrations.AddField(
            model_name='fakefuelelementtype',
            name='fuel_assembly_model',
            field=models.OneToOneField(to='tragopan.FuelAssemblyModel'),
        ),
        migrations.AddField(
            model_name='fakefuelelementtype',
            name='material',
            field=models.ForeignKey(to='tragopan.Material'),
        ),
        migrations.AddField(
            model_name='cycle',
            name='unit',
            field=models.ForeignKey(related_name='cycles', to='tragopan.UnitParameter'),
        ),
        migrations.AddField(
            model_name='coreupperplate',
            name='material',
            field=models.ForeignKey(to='tragopan.Material'),
        ),
        migrations.AddField(
            model_name='coreupperplate',
            name='reactor_model',
            field=models.OneToOneField(to='tragopan.ReactorModel'),
        ),
        migrations.AddField(
            model_name='coreupperplate',
            name='vendor',
            field=models.ForeignKey(to='tragopan.Vendor'),
        ),
        migrations.AddField(
            model_name='corelowerplate',
            name='material',
            field=models.ForeignKey(to='tragopan.Material'),
        ),
        migrations.AddField(
            model_name='corelowerplate',
            name='reactor_model',
            field=models.OneToOneField(to='tragopan.ReactorModel'),
        ),
        migrations.AddField(
            model_name='corelowerplate',
            name='vendor',
            field=models.ForeignKey(to='tragopan.Vendor'),
        ),
        migrations.AddField(
            model_name='corebarrel',
            name='material',
            field=models.ForeignKey(to='tragopan.Material'),
        ),
        migrations.AddField(
            model_name='corebarrel',
            name='reactor_model',
            field=models.OneToOneField(to='tragopan.ReactorModel'),
        ),
        migrations.AddField(
            model_name='corebarrel',
            name='vendor',
            field=models.ForeignKey(to='tragopan.Vendor'),
        ),
        migrations.AddField(
            model_name='corebaffle',
            name='material',
            field=models.ForeignKey(to='tragopan.Material'),
        ),
        migrations.AddField(
            model_name='corebaffle',
            name='reactor_model',
            field=models.OneToOneField(to='tragopan.ReactorModel'),
        ),
        migrations.AddField(
            model_name='corebaffle',
            name='vendor',
            field=models.ForeignKey(to='tragopan.Vendor'),
        ),
        migrations.AddField(
            model_name='controlrodtype',
            name='absorb_material',
            field=models.ForeignKey(related_name='control_rod_absorb', to='tragopan.Material'),
        ),
        migrations.AddField(
            model_name='controlrodtype',
            name='cladding_material',
            field=models.ForeignKey(related_name='control_rod_cladding', to='tragopan.Material'),
        ),
        migrations.AddField(
            model_name='controlrodtype',
            name='fuel_assembly_model',
            field=models.ForeignKey(to='tragopan.FuelAssemblyModel'),
        ),
        migrations.AddField(
            model_name='controlrodmap',
            name='control_rod_type',
            field=models.ForeignKey(to='tragopan.ControlRodType'),
        ),
        migrations.AddField(
            model_name='controlrodmap',
            name='guide_tube_position',
            field=models.ForeignKey(to='tragopan.FuelAssemblyPosition'),
        ),
        migrations.AddField(
            model_name='controlrodassemblystep',
            name='operation',
            field=models.ForeignKey(to='tragopan.OperationParameter'),
        ),
        migrations.AddField(
            model_name='controlrodassemblyloadingpattern',
            name='cycle',
            field=models.ForeignKey(related_name='control_rod_assembly_loading_patterns', to='tragopan.Cycle', null=True, blank=True),
        ),
        migrations.AddField(
            model_name='controlrodassemblyloadingpattern',
            name='reactor_position',
            field=models.ForeignKey(related_name='control_rod_assembly_pattern', to='tragopan.ReactorPosition'),
        ),
        migrations.AddField(
            model_name='controlrodassembly',
            name='control_rod_map',
            field=models.ManyToManyField(to='tragopan.FuelAssemblyPosition', through='tragopan.ControlRodMap'),
        ),
        migrations.AddField(
            model_name='controlrodassembly',
            name='reactor_model',
            field=models.ForeignKey(related_name='control_rod_assemblies', to='tragopan.ReactorModel', null=True, blank=True),
        ),
        migrations.AddField(
            model_name='claddingtube',
            name='fuel_element',
            field=models.OneToOneField(to='tragopan.FuelElement'),
        ),
        migrations.AddField(
            model_name='claddingtube',
            name='material',
            field=models.ForeignKey(to='tragopan.Material'),
        ),
        migrations.AddField(
            model_name='burnablepoisonrodmap',
            name='burnable_poison_position',
            field=models.ForeignKey(to='tragopan.FuelAssemblyPosition'),
        ),
        migrations.AddField(
            model_name='burnablepoisonrod',
            name='fuel_assembly_model',
            field=models.OneToOneField(to='tragopan.FuelAssemblyModel'),
        ),
        migrations.AddField(
            model_name='burnablepoisonrod',
            name='radial_map',
            field=models.ManyToManyField(related_name='burnable_poison_rod', to='tragopan.Material', through='tragopan.BurnablePoisonMaterial'),
        ),
        migrations.AddField(
            model_name='burnablepoisonmaterial',
            name='burnable_poison_rod',
            field=models.ForeignKey(to='tragopan.BurnablePoisonRod'),
        ),
        migrations.AddField(
            model_name='burnablepoisonmaterial',
            name='material',
            field=models.ForeignKey(to='tragopan.Material'),
        ),
        migrations.AddField(
            model_name='burnablepoisonassemblyloadingpattern',
            name='cycle',
            field=models.ForeignKey(related_name='bpa_loading_patterns', to='tragopan.Cycle'),
        ),
        migrations.AddField(
            model_name='burnablepoisonassemblyloadingpattern',
            name='reactor_position',
            field=models.ForeignKey(to='tragopan.ReactorPosition'),
        ),
        migrations.AddField(
            model_name='burnablepoisonassembly',
            name='burnable_poison_map',
            field=models.ManyToManyField(related_name='bp_burnable_poison', to='tragopan.FuelAssemblyPosition', through='tragopan.BurnablePoisonRodMap'),
        ),
        migrations.AddField(
            model_name='burnablepoisonassembly',
            name='fuel_assembly_model',
            field=models.ForeignKey(to='tragopan.FuelAssemblyModel'),
        ),
        migrations.AlterUniqueTogether(
            name='unitparameter',
            unique_together=set([('plant', 'unit')]),
        ),
        migrations.AlterUniqueTogether(
            name='sourceassemblyloadingpattern',
            unique_together=set([('cycle', 'reactor_position')]),
        ),
        migrations.AlterUniqueTogether(
            name='reactorposition',
            unique_together=set([('reactor_model', 'row', 'column')]),
        ),
        migrations.AlterOrderWithRespectTo(
            name='operationparameter',
            order_with_respect_to='cycle',
        ),
        migrations.AlterUniqueTogether(
            name='nuclide',
            unique_together=set([('element', 'atom_mass')]),
        ),
        migrations.AlterOrderWithRespectTo(
            name='materialcomposition',
            order_with_respect_to='material',
        ),
        migrations.AlterUniqueTogether(
            name='fuelelementtypeposition',
            unique_together=set([('fuel_assembly_type', 'fuel_assembly_position')]),
        ),
        migrations.AlterUniqueTogether(
            name='fuelassemblyposition',
            unique_together=set([('fuel_assembly_model', 'row', 'column')]),
        ),
        migrations.AlterUniqueTogether(
            name='fuelassemblyloadingpattern',
            unique_together=set([('cycle', 'fuel_assembly'), ('cycle', 'reactor_position')]),
        ),
        migrations.AlterUniqueTogether(
            name='cycle',
            unique_together=set([('cycle', 'unit')]),
        ),
        migrations.AlterUniqueTogether(
            name='controlrodmap',
            unique_together=set([('control_rod_assembly', 'guide_tube_position')]),
        ),
        migrations.AlterUniqueTogether(
            name='burnablepoisonrodmap',
            unique_together=set([('burnable_poison_assembly', 'burnable_poison_position')]),
        ),
    ]
